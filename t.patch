diff --git a/src/BubbleInspector.svelte b/src/BubbleInspector.svelte
index 9d81e1d..8051288 100644
--- a/src/BubbleInspector.svelte
+++ b/src/BubbleInspector.svelte
@@ -26,7 +26,7 @@
   import resetIcon from './assets/reset.png';
 
   let oldBubble = null;
-  let adjustedPosition = { x: 50, y: 720 };
+  let adjustedPosition = { x: window.innerWidth - 350 - 16, y: 16 };
   let pinned = true;
   let textarea = null;
   let inspectorSize = [0, 0];
diff --git a/src/MainPaper.svelte b/src/MainPaper.svelte
index ff158cf..a45fe0e 100644
--- a/src/MainPaper.svelte
+++ b/src/MainPaper.svelte
@@ -34,7 +34,7 @@
         paper.save();
         break;
       case 'aipictors':
-        paper.postToSNS();
+        paper.postToAIPictors();
         break;
       case 'psd':
         saveAsPSD($mainPage);
@@ -88,7 +88,7 @@
 
   function onScribbleDone() {
     console.log("onScribbleDone")
-    paper.scribbleDone();
+    paper.scribbleDone(painterElement);
     painterActive = false;
   }
 
@@ -98,8 +98,8 @@
 
   function onAutoGenerate(e_: CustomEvent) {
     if (!painterAutoGenerate) { return; }
+    if (!autoGeneration) { return; }
     painterAutoGenerate.doScribble(
-      autoGeneration,
       url,
       painterElement.scribble,
       painterElement.prompt,
diff --git a/src/Paper.svelte b/src/Paper.svelte
index 2fd3671..fd5f738 100644
--- a/src/Paper.svelte
+++ b/src/Paper.svelte
@@ -160,6 +160,7 @@
       constraintElement(element, true);
     }
     if (!element.scribble) {
+      console.log(`make scribble ${element.image.naturalWidth}x${element.image.naturalHeight}`);
       element.scribble = await makePlainImage(element.image.naturalWidth, element.image.naturalHeight, false);
       element.gallery.push(element.scribble);
     }
@@ -171,12 +172,27 @@
     bubbleLayer.interactable = false;
   }
 
-  export function scribbleDone() {
+  export async function scribbleDone(element: FrameElement) {
     console.log("scribbleDone");
     painterActive = false;
     inlinePainterLayer.setElement(null);
     frameLayer.interactable = true;
     bubbleLayer.interactable = true;
+
+    // merge
+    await element.scribble.decode();
+    const canvas = document.createElement('canvas');
+    canvas.width = element.image.naturalWidth;
+    canvas.height = element.image.naturalHeight;
+    const ctx = canvas.getContext('2d');
+    ctx.drawImage(element.image, 0, 0);
+    ctx.drawImage(element.scribble, 0, 0);
+    element.image.src = canvas.toDataURL();
+    await element.image.decode();
+
+    element.gallery = element.gallery.filter((e) => e !== element.scribble);
+    element.scribble = null;
+
     commit(null);
   }
   
diff --git a/src/lib/layeredCanvas/paperRendererLayer.js b/src/lib/layeredCanvas/paperRendererLayer.js
index 09afcc5..e1ec17d 100644
--- a/src/lib/layeredCanvas/paperRendererLayer.js
+++ b/src/lib/layeredCanvas/paperRendererLayer.js
@@ -166,7 +166,7 @@ export class PaperRendererLayer extends Layer {
     if (element.visibility < 1) { return; }
 
     // ■■■ visibility 1;
-    if (element.image || 0 < embeddedBubbles.has(layout)) {
+    if (element.image || element.scribble || 0 < embeddedBubbles.has(layout)) {
       // clip
       ctx.save();
       if (!element.focused) {
@@ -309,6 +309,9 @@ export class PaperRendererLayer extends Layer {
     ctx.rotate(-element.rotation * Math.PI / 180);
     ctx.translate(-element.image.naturalWidth * 0.5, -element.image.naturalHeight * 0.5);
     ctx.drawImage(element.image, 0, 0, element.image.naturalWidth, element.image.naturalHeight);
+    if (element.scribble) {
+      ctx.drawImage(element.scribble, 0, 0, element.image.naturalWidth, element.image.naturalHeight);
+    }
     ctx.restore();
   }
 
diff --git a/src/painter/PainterAutoGenerate.svelte b/src/painter/PainterAutoGenerate.svelte
index fd2c3d8..0966416 100644
--- a/src/painter/PainterAutoGenerate.svelte
+++ b/src/painter/PainterAutoGenerate.svelte
@@ -5,20 +5,7 @@
   let busy: boolean;
   let queued: boolean;
 
-  export async function doScribble(callGeneration, url, refered, prompt, lcm, target) {
-    if (!callGeneration) {
-      const canvas = document.createElement('canvas');
-      canvas.width = target.width;
-      canvas.height = target.height;
-      const ctx = canvas.getContext('2d');
-      ctx.drawImage(target, 0, 0);
-      ctx.drawImage(refered, 0, 0);
-      target.src = canvas.toDataURL();
-      await target.decode();
-      $redrawToken = true;
-      return;
-    }
-
+  export async function doScribble(url, refered, prompt, lcm, target) {
     if (busy) { 
       queued = true;
       return; 
